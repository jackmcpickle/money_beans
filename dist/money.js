// Generated by CoffeeScript 1.10.0
var Money;

Money = (function() {
  function Money(num) {
    this.cents = this.getCents(num);
  }

  Money.prototype.getCents = function(num) {
    if (num === NaN) {
      return 0;
    }
    if (typeof num === 'number') {
      return num;
    }
    if (typeof num === 'string') {
      return this.buildFromString(num);
    }
    console.warn("Please use a number when creating a Money object not a " + (typeof num) + ". Called from " + (arguments.callee.caller.toString()) + " with ", num);
    return 0;
  };

  Money.prototype.buildFromString = function(num) {
    var cents, dollars, nums;
    num = num.replace(/,/g, '').match(/[0-9]+.?[0-9]*/, '');
    if (num == null) {
      return 0;
    }
    nums = num[0].split('.');
    dollars = parseInt(nums[0]);
    cents = nums[1] != null ? parseInt(nums[1]) : 0;
    return dollars * 100 + cents;
  };

  Money.prototype.dollars = function() {
    return this.cents / 100.0;
  };

  Money.prototype.format = function() {
    return this.dollars().toFixed(2);
  };

  Money.prototype.signClass = function() {
    if (this.sign() === 1) {
      return 'positive';
    } else if (this.sign() === -1) {
      return 'negative';
    } else {
      return 'zero';
    }
  };

  Money.prototype.sign = function() {
    return this.cents && (this.cents / Math.abs(this.cents));
  };

  Money.prototype.absoluteFormat = function() {
    return Math.abs(this.dollars()).toFixed(2);
  };

  Money.prototype.isZero = function() {
    return this.cents === 0;
  };

  Money.prototype.isPositive = function() {
    return this.cents > 0;
  };

  Money.prototype.isNegative = function() {
    return this.cents < 0;
  };

  Money.prototype.equals = function(other) {
    return this.cents === other.cents;
  };

  Money.prototype.currencySymbol = function() {
    return '$';
  };

  Money.prototype.signSymbol = function() {
    if (this.sign() === -1) {
      return '-';
    } else {
      return '';
    }
  };

  Money.prototype.currencyFormat = function() {
    return this.signSymbol() + this.currencySymbol() + this.absoluteFormat();
  };

  Money.prototype.add = function(other) {
    return new Money(this.cents + other.cents);
  };

  Money.prototype.subtract = function(other) {
    return new Money(this.cents - other.cents);
  };

  Money.prototype.multiply = function(num) {
    return new Money(Math.round(this.cents * num));
  };

  Money.prototype.render = function() {
    return "<span class=\"money " + (this.signClass()) + "\">" + (this.currencyFormat()) + "</span>";
  };

  Money.prototype.toString = function() {
    return this.format();
  };

  return Money;

})();

module.exports = Money;
